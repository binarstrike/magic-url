// Code generated by MockGen. DO NOT EDIT.
// Source: redis_repository.go
//
// Generated by this command:
//
//	mockgen -source redis_repository.go -destination mock/redis_repository_mock.go -package user_mock
//

// Package user_mock is a generated GoMock package.
package user_mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/binarstrike/magic-url/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockRedisRepository) DeleteUser(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRedisRepositoryMockRecorder) DeleteUser(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRedisRepository)(nil).DeleteUser), ctx, key)
}

// GetUser mocks base method.
func (m *MockRedisRepository) GetUser(ctx context.Context, key string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, key)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRedisRepositoryMockRecorder) GetUser(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRedisRepository)(nil).GetUser), ctx, key)
}

// SetUser mocks base method.
func (m *MockRedisRepository) SetUser(ctx context.Context, key string, user *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", ctx, key, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUser indicates an expected call of SetUser.
func (mr *MockRedisRepositoryMockRecorder) SetUser(ctx, key, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockRedisRepository)(nil).SetUser), ctx, key, user)
}
